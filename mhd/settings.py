"""
Django settings for mhd project.

Generated by 'django-admin startproject' using Django 2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# if we have psycopg2cffi installed, use it
# (which will work with pypy)
from typing import List

try:
    from psycopg2cffi import compat
    compat.register()
except ImportError:
    pass

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'o0_0r&@$9=!)#^78dao^f4rd^kxiw1db&navvk27q8hest#_fb'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS: List[str] = []


# Application definition

INSTALLED_APPS = [
    'mhd_schema',
    'mhd_data',
    'mhd_provenance',
    'mddl_catalog',
    'rest_framework',
    'mviews',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
]

USE_TEST_APP = True  # set this to true to add the test app to installed apps

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mhd.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mhd.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

# Django Rest Framework
REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'mhd.utils.DefaultPaginator',
    'PAGE_SIZE': 50,
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ],
    'TEST_REQUEST_DEFAULT_FORMAT': 'json'
}

# CORS
# TODO: allow only frontend
CORS_ORIGIN_ALLOW_ALL = True


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

# we only have static files for the admin site
STATIC_URL = '/api/admin/static/'

# buildpath used (only used in development)
WEBPACK_BUILD_PATH = os.path.join(BASE_DIR, 'frontend', 'build')

# Log everything of info and above to STDOUT at all times
LOGGING = {
    'version': 1,
    'filters': {
        'require_log_queries': {
            '()': 'mhd.logging.RequireLogQueries'
        }
    },
    'formatters': {
        'default': {
            'format': '[{levelname} - {asctime}] {name}: {message}',
            'style': '{',
        },
        'plain': {
            'format': '{message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'default'
        },
        'debugconsole': {
            'level': 'DEBUG',
            'filters': ['require_log_queries'],
            'class': 'logging.StreamHandler',
            'formatter': 'plain'
        }
    },
    'loggers': {
        'mhd': {
            'level': 'DEBUG',
            'handlers': ['console']
        },
        'django.db.backends': {
            'level': 'DEBUG',
            'handlers': ['debugconsole'],
        }
    }
}

# try and import local_settings if they exist
try:
    from .local_settings import *
except ImportError:
    pass

# when set to true, enable the test app
if USE_TEST_APP:
    INSTALLED_APPS.append('mhd_tests')
